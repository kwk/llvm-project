# In these tests we will set breakpoints on a function by name with the
# target.inline-breakpoint-strategy setting alternating between set "always" and
# "headers".

# RUN: %build %p/Inputs/search-support-files.cpp -o %t.out
# RUN: %lldb -b -s %s %t.out | FileCheck %s 


#    Set breakpoint by function name.


settings set target.inline-breakpoint-strategy always
breakpoint set -n function_in_header
# CHECK: (lldb) breakpoint set -n function_in_header
# CHECK-NEXT: Breakpoint 1: where = {{.*}}.out`function_in_header(){{.*}} at search-support-files.h

settings set target.inline-breakpoint-strategy headers
breakpoint set -n function_in_header
# CHECK: (lldb) breakpoint set -n function_in_header
# CHECK-NEXT: Breakpoint 2: where = {{.*}}.out`function_in_header(){{.*}} at search-support-files.h



settings set target.inline-breakpoint-strategy always
breakpoint set -n main
# CHECK: (lldb) breakpoint set -n main
# CHECK-NEXT: Breakpoint 3: where = {{.*}}.out`main{{.*}} at search-support-files.cpp

settings set target.inline-breakpoint-strategy headers
breakpoint set -n main
# CHECK: (lldb) breakpoint set -n main
# CHECK-NEXT: Breakpoint 4: where = {{.*}}.out`main{{.*}} at search-support-files.cpp



settings set target.inline-breakpoint-strategy always
breakpoint set -n func
# CHECK: (lldb) breakpoint set -n func
# CHECK-NEXT: Breakpoint 5: where = {{.*}}.out`func{{.*}} at search-support-files-func.cpp

settings set target.inline-breakpoint-strategy headers
breakpoint set -n func
# CHECK: (lldb) breakpoint set -n func
# CHECK-NEXT: Breakpoint 6: where = {{.*}}.out`func{{.*}} at search-support-files-func.cpp



#   Set breakpoint by function name and filename (here: the compilation unit).



settings set target.inline-breakpoint-strategy always
breakpoint set -n function_in_header -f search-support-files.cpp
# CHECK: (lldb) breakpoint set -n function_in_header -f search-support-files.cpp
# CHECK-NEXT: Breakpoint 7: no locations (pending).

settings set target.inline-breakpoint-strategy headers
breakpoint set -n function_in_header -f search-support-files.cpp
# CHECK: (lldb) breakpoint set -n function_in_header -f search-support-files.cpp
# CHECK-NEXT: Breakpoint 8: no locations (pending).



#   Set breakpoint by function name and source filename (the file in which the
#   function is defined).
#
#   NOTE: This test is the really interesting one as it shows that we can
#         search by source files that are themselves no compilation units.



settings set target.inline-breakpoint-strategy always
breakpoint set -n function_in_header -f search-support-files.h
# CHECK: (lldb) breakpoint set -n function_in_header -f search-support-files.h
# CHECK-NEXT: Breakpoint 9: where = {{.*}}.out`function_in_header(){{.*}} at search-support-files.h

settings set target.inline-breakpoint-strategy headers
breakpoint set -n function_in_header -f search-support-files.h
# CHECK: (lldb) breakpoint set -n function_in_header -f search-support-files.h
# CHECK-NEXT: Breakpoint 10: no locations (pending).


settings set target.inline-breakpoint-strategy always
breakpoint set -n func -f search-support-files-func.cpp
# CHECK: (lldb) breakpoint set -n func -f search-support-files-func.cpp
# CHECK-NEXT: Breakpoint 11: where = {{.*}}.out`func(){{.*}} at search-support-files-func.cpp

settings set target.inline-breakpoint-strategy headers
breakpoint set -n func -f search-support-files-func.cpp
# CHECK: (lldb) breakpoint set -n func -f search-support-files-func.cpp
# CHECK-NEXT: Breakpoint 12: no locations (pending).



#   Set breakpoint by function name and source filename. This time the file
#   doesn't exist or is not the file in which the function is declared or
#   defined. This is to prove that we haven't widen the search space too much.
#   When we search for a function in a file that doesn't exist, we should get no
#   results.



settings set target.inline-breakpoint-strategy always
breakpoint set -n function_in_header -f file-not-existing.h
# CHECK: (lldb) breakpoint set -n function_in_header -f file-not-existing.h
# CHECK-NEXT: Breakpoint 13: no locations (pending).

settings set target.inline-breakpoint-strategy headers
breakpoint set -n function_in_header -f file-not-existing.h
# CHECK: (lldb) breakpoint set -n function_in_header -f file-not-existing.h
# CHECK-NEXT: Breakpoint 14: no locations (pending).



settings set target.inline-breakpoint-strategy always
breakpoint set -n func -f search-support-files.cpp
# CHECK: (lldb) breakpoint set -n func -f search-support-files.cpp
# CHECK-NEXT: Breakpoint 15: no locations (pending).

settings set target.inline-breakpoint-strategy headers
breakpoint set -n func -f search-support-files.cpp
# CHECK: (lldb) breakpoint set -n func -f search-support-files.cpp
# CHECK-NEXT: Breakpoint 16: no locations (pending).